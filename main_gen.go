package main

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Identity) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "PublicKeyHash":
			z.PublicKeyHash, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PublicKeyHash")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Identity) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Name"
	err = en.Append(0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "PublicKeyHash"
	err = en.Append(0xad, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.PublicKeyHash)
	if err != nil {
		err = msgp.WrapError(err, "PublicKeyHash")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Identity) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Name"
	o = append(o, 0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "PublicKeyHash"
	o = append(o, 0xad, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.PublicKeyHash)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Identity) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "PublicKeyHash":
			z.PublicKeyHash, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PublicKeyHash")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Identity) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 14 + msgp.StringPrefixSize + len(z.PublicKeyHash)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Post) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Author":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Author")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Author")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Name":
					z.Author.Name, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Author", "Name")
						return
					}
				case "PublicKeyHash":
					z.Author.PublicKeyHash, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Author", "PublicKeyHash")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Author")
						return
					}
				}
			}
		case "Creation":
			z.Creation, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Creation")
				return
			}
		case "Replies":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Replies")
				return
			}
			if cap(z.Replies) >= int(zb0003) {
				z.Replies = (z.Replies)[:zb0003]
			} else {
				z.Replies = make([]Reply, zb0003)
			}
			for za0001 := range z.Replies {
				err = z.Replies[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Replies", za0001)
					return
				}
			}
		case "Body":
			z.Body, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Body")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Post) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Id"
	err = en.Append(0x85, 0xa2, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "Author"
	err = en.Append(0xa6, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Name"
	err = en.Append(0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Author.Name)
	if err != nil {
		err = msgp.WrapError(err, "Author", "Name")
		return
	}
	// write "PublicKeyHash"
	err = en.Append(0xad, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Author.PublicKeyHash)
	if err != nil {
		err = msgp.WrapError(err, "Author", "PublicKeyHash")
		return
	}
	// write "Creation"
	err = en.Append(0xa8, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteTime(z.Creation)
	if err != nil {
		err = msgp.WrapError(err, "Creation")
		return
	}
	// write "Replies"
	err = en.Append(0xa7, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Replies)))
	if err != nil {
		err = msgp.WrapError(err, "Replies")
		return
	}
	for za0001 := range z.Replies {
		err = z.Replies[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Replies", za0001)
			return
		}
	}
	// write "Body"
	err = en.Append(0xa4, 0x42, 0x6f, 0x64, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Body)
	if err != nil {
		err = msgp.WrapError(err, "Body")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Post) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Id"
	o = append(o, 0x85, 0xa2, 0x49, 0x64)
	o = msgp.AppendString(o, z.Id)
	// string "Author"
	o = append(o, 0xa6, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72)
	// map header, size 2
	// string "Name"
	o = append(o, 0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Author.Name)
	// string "PublicKeyHash"
	o = append(o, 0xad, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.Author.PublicKeyHash)
	// string "Creation"
	o = append(o, 0xa8, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendTime(o, z.Creation)
	// string "Replies"
	o = append(o, 0xa7, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Replies)))
	for za0001 := range z.Replies {
		o, err = z.Replies[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Replies", za0001)
			return
		}
	}
	// string "Body"
	o = append(o, 0xa4, 0x42, 0x6f, 0x64, 0x79)
	o = msgp.AppendString(o, z.Body)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Post) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Id":
			z.Id, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "Author":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Author")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Author")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Name":
					z.Author.Name, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Author", "Name")
						return
					}
				case "PublicKeyHash":
					z.Author.PublicKeyHash, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Author", "PublicKeyHash")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Author")
						return
					}
				}
			}
		case "Creation":
			z.Creation, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Creation")
				return
			}
		case "Replies":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Replies")
				return
			}
			if cap(z.Replies) >= int(zb0003) {
				z.Replies = (z.Replies)[:zb0003]
			} else {
				z.Replies = make([]Reply, zb0003)
			}
			for za0001 := range z.Replies {
				bts, err = z.Replies[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Replies", za0001)
					return
				}
			}
		case "Body":
			z.Body, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Body")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Post) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.Id) + 7 + 1 + 5 + msgp.StringPrefixSize + len(z.Author.Name) + 14 + msgp.StringPrefixSize + len(z.Author.PublicKeyHash) + 9 + msgp.TimeSize + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Replies {
		s += z.Replies[za0001].Msgsize()
	}
	s += 5 + msgp.StringPrefixSize + len(z.Body)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Reply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Author":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Author")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Author")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Name":
					z.Author.Name, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Author", "Name")
						return
					}
				case "PublicKeyHash":
					z.Author.PublicKeyHash, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Author", "PublicKeyHash")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Author")
						return
					}
				}
			}
		case "Creation":
			z.Creation, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Creation")
				return
			}
		case "Body":
			z.Body, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Body")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Reply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Author"
	err = en.Append(0x83, 0xa6, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72)
	if err != nil {
		return
	}
	// map header, size 2
	// write "Name"
	err = en.Append(0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Author.Name)
	if err != nil {
		err = msgp.WrapError(err, "Author", "Name")
		return
	}
	// write "PublicKeyHash"
	err = en.Append(0xad, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Author.PublicKeyHash)
	if err != nil {
		err = msgp.WrapError(err, "Author", "PublicKeyHash")
		return
	}
	// write "Creation"
	err = en.Append(0xa8, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteTime(z.Creation)
	if err != nil {
		err = msgp.WrapError(err, "Creation")
		return
	}
	// write "Body"
	err = en.Append(0xa4, 0x42, 0x6f, 0x64, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Body)
	if err != nil {
		err = msgp.WrapError(err, "Body")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Reply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Author"
	o = append(o, 0x83, 0xa6, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72)
	// map header, size 2
	// string "Name"
	o = append(o, 0x82, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Author.Name)
	// string "PublicKeyHash"
	o = append(o, 0xad, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68)
	o = msgp.AppendString(o, z.Author.PublicKeyHash)
	// string "Creation"
	o = append(o, 0xa8, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendTime(o, z.Creation)
	// string "Body"
	o = append(o, 0xa4, 0x42, 0x6f, 0x64, 0x79)
	o = msgp.AppendString(o, z.Body)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Reply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Author":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Author")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Author")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Name":
					z.Author.Name, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Author", "Name")
						return
					}
				case "PublicKeyHash":
					z.Author.PublicKeyHash, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Author", "PublicKeyHash")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Author")
						return
					}
				}
			}
		case "Creation":
			z.Creation, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Creation")
				return
			}
		case "Body":
			z.Body, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Body")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Reply) Msgsize() (s int) {
	s = 1 + 7 + 1 + 5 + msgp.StringPrefixSize + len(z.Author.Name) + 14 + msgp.StringPrefixSize + len(z.Author.PublicKeyHash) + 9 + msgp.TimeSize + 5 + msgp.StringPrefixSize + len(z.Body)
	return
}
